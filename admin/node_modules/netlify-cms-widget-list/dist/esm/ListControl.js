"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _core = require("@emotion/core");

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _isEmpty2 = _interopRequireDefault(require("lodash/isEmpty"));

var _partial2 = _interopRequireDefault(require("lodash/partial"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _immutable = require("immutable");

var _v = _interopRequireDefault(require("uuid/v4"));

var _reactSortableHoc = require("react-sortable-hoc");

var _netlifyCmsWidgetObject = _interopRequireDefault(require("netlify-cms-widget-object"));

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _netlifyCmsLibWidgets = require("netlify-cms-lib-widgets");

var _typedListHelpers = require("./typedListHelpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const ObjectControl = _netlifyCmsWidgetObject.default.controlComponent;
const ListItem = (0, _styledBase.default)("div", {
  target: "e14bfka80",
  label: "ListItem"
})(process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const SortableListItem = (0, _reactSortableHoc.SortableElement)(ListItem);
const StyledListItemTopBar = ( /*#__PURE__*/0, _styledBase.default)(_netlifyCmsUiDefault.ListItemTopBar, {
  target: "e14bfka81",
  label: "StyledListItemTopBar"
})("background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const NestedObjectLabel = (0, _styledBase.default)("div", {
  target: "e14bfka82",
  label: "NestedObjectLabel"
})("display:", props => props.collapsed ? 'block' : 'none', ";border-top:0;color:", props => props.error ? _netlifyCmsUiDefault.colors.errorText : 'inherit', ";background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";padding:13px;border-radius:0 0 ", _netlifyCmsUiDefault.lengths.borderRadius, " ", _netlifyCmsUiDefault.lengths.borderRadius, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const styleStrings = {
  collapsedObjectControl: `
    display: none;
  `,
  objectWidgetTopBarContainer: `
    padding: ${_netlifyCmsUiDefault.lengths.objectWidgetTopBarContainerPadding};
  `
};
const styles = {
  listControlItem: process.env.NODE_ENV === "production" ? {
    name: "1pb8r5b-listControlItem",
    styles: "margin-top:18px;&:first-of-type{margin-top:26px;};label:listControlItem;"
  } : {
    name: "1pb8r5b-listControlItem",
    styles: "margin-top:18px;&:first-of-type{margin-top:26px;};label:listControlItem;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  listControlItemCollapsed: process.env.NODE_ENV === "production" ? {
    name: "1u3t54p-listControlItemCollapsed",
    styles: "padding-bottom:0;;label:listControlItemCollapsed;"
  } : {
    name: "1u3t54p-listControlItemCollapsed",
    styles: "padding-bottom:0;;label:listControlItemCollapsed;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  }
};
const SortableList = (0, _reactSortableHoc.SortableContainer)(({
  items,
  renderItem
}) => {
  return (0, _core.jsx)("div", null, items.map(renderItem));
});
const valueTypes = {
  SINGLE: 'SINGLE',
  MULTIPLE: 'MULTIPLE',
  MIXED: 'MIXED'
};

function handleSummary(summary, entry, label, item) {
  const data = _netlifyCmsLibWidgets.stringTemplate.addFileTemplateFields(entry.get('path'), item.set('fields.label', label));

  return _netlifyCmsLibWidgets.stringTemplate.compileStringTemplate(summary, null, '', data);
}

function validateItem(field, item) {
  if (!_immutable.Map.isMap(item)) {
    console.warn(`'${field.get('name')}' field item value value should be a map but is a '${typeof item}'`);
    return false;
  }

  return true;
}

function LabelComponent({
  field,
  isActive,
  hasErrors,
  uniqueFieldId,
  isFieldOptional,
  t
}) {
  const label = `${field.get('label', field.get('name'))}`;
  return (0, _core.jsx)(_netlifyCmsUiDefault.FieldLabel, {
    isActive: isActive,
    hasErrors: hasErrors,
    htmlFor: uniqueFieldId
  }, label, " ", `${isFieldOptional ? ` (${t('editor.editorControl.field.optional')})` : ''}`);
}

class ListControl extends _react.default.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "validations", []);

    _defineProperty(this, "valueToString", value => {
      let stringValue;

      if (_immutable.List.isList(value) || Array.isArray(value)) {
        stringValue = value.join(',');
      } else {
        console.warn(`Expected List value to be an array but received '${value}' with type of '${typeof value}'. Please check the value provided to the '${this.props.field.get('name')}' field`);
        stringValue = String(value);
      }

      return stringValue.replace(/,([^\s]|$)/g, ', $1');
    });

    _defineProperty(this, "getValueType", () => {
      const {
        field
      } = this.props;

      if (field.get('fields')) {
        return valueTypes.MULTIPLE;
      } else if (field.get('field')) {
        return valueTypes.SINGLE;
      } else if (field.get(_typedListHelpers.TYPES_KEY)) {
        return valueTypes.MIXED;
      } else {
        return null;
      }
    });

    _defineProperty(this, "uniqueFieldId", (0, _uniqueId2.default)(`${this.props.field.get('name')}-field-`));

    _defineProperty(this, "handleChange", e => {
      const {
        onChange
      } = this.props;
      const oldValue = this.state.value;
      const newValue = e.target.value.trim();
      const listValue = newValue ? newValue.split(',') : [];

      if (newValue.match(/,$/) && oldValue.match(/, $/)) {
        listValue.pop();
      }

      const parsedValue = this.valueToString(listValue);
      this.setState({
        value: parsedValue
      });
      onChange((0, _immutable.List)(listValue.map(val => val.trim())));
    });

    _defineProperty(this, "handleFocus", () => {
      this.props.setActiveStyle();
    });

    _defineProperty(this, "handleBlur", e => {
      const listValue = e.target.value.split(',').map(el => el.trim()).filter(el => el);
      this.setState({
        value: this.valueToString(listValue)
      });
      this.props.setInactiveStyle();
    });

    _defineProperty(this, "handleAdd", e => {
      e.preventDefault();
      const {
        field
      } = this.props;
      const parsedValue = this.getValueType() === valueTypes.SINGLE ? this.singleDefault() : (0, _immutable.fromJS)(this.multipleDefault(field.get('fields')));
      this.addItem(parsedValue);
    });

    _defineProperty(this, "singleDefault", () => {
      return this.props.field.getIn(['field', 'default'], null);
    });

    _defineProperty(this, "multipleDefault", fields => {
      return this.getFieldsDefault(fields);
    });

    _defineProperty(this, "handleAddType", (type, typeKey) => {
      const parsedValue = (0, _immutable.fromJS)(this.mixedDefault(typeKey, type));
      this.addItem(parsedValue);
    });

    _defineProperty(this, "mixedDefault", (typeKey, type) => {
      const selectedType = this.props.field.get(_typedListHelpers.TYPES_KEY).find(f => f.get('name') === type);
      const fields = selectedType.get('fields') || [selectedType.get('field')];
      return this.getFieldsDefault(fields, {
        [typeKey]: type
      });
    });

    _defineProperty(this, "getFieldsDefault", (fields, initialValue = {}) => {
      return fields.reduce((acc, item) => {
        const subfields = item.get('field') || item.get('fields');
        const object = item.get('widget') == 'object';
        const name = item.get('name');
        const defaultValue = item.get('default', null);

        if (_immutable.List.isList(subfields) && object) {
          const subDefaultValue = this.getFieldsDefault(subfields);
          !(0, _isEmpty2.default)(subDefaultValue) && (acc[name] = subDefaultValue);
          return acc;
        }

        if (_immutable.Map.isMap(subfields) && object) {
          const subDefaultValue = this.getFieldsDefault([subfields]);
          !(0, _isEmpty2.default)(subDefaultValue) && (acc[name] = subDefaultValue);
          return acc;
        }

        if (defaultValue !== null) {
          acc[name] = defaultValue;
        }

        return acc;
      }, initialValue);
    });

    _defineProperty(this, "addItem", parsedValue => {
      const {
        value,
        onChange,
        field
      } = this.props;
      const addToTop = field.get('add_to_top', false);
      const itemKey = (0, _v.default)();
      this.setState({
        itemsCollapsed: addToTop ? [false, ...this.state.itemsCollapsed] : [...this.state.itemsCollapsed, false],
        keys: addToTop ? [itemKey, ...this.state.keys] : [...this.state.keys, itemKey]
      });
      const listValue = value || (0, _immutable.List)();

      if (addToTop) {
        onChange(listValue.unshift(parsedValue));
      } else {
        onChange(listValue.push(parsedValue));
      }
    });

    _defineProperty(this, "processControlRef", ref => {
      if (!ref) return;
      const {
        validate,
        props: {
          validationKey: key
        }
      } = ref;
      this.validations.push({
        key,
        validate
      });
    });

    _defineProperty(this, "validate", () => {
      if (this.getValueType()) {
        this.validations.forEach(item => {
          item.validate();
        });
      } else {
        this.props.validate();
      }

      this.props.onValidateObject(this.props.forID, this.validateSize());
    });

    _defineProperty(this, "validateSize", () => {
      const {
        field,
        value,
        t
      } = this.props;
      const min = field.get('min');
      const max = field.get('max');
      const required = field.get('required', true);

      if (!required && !(value !== null && value !== void 0 && value.size)) {
        return [];
      }

      const error = _netlifyCmsLibWidgets.validations.validateMinMax(t, field.get('label', field.get('name')), value, min, max);

      return error ? [error] : [];
    });

    _defineProperty(this, "getObjectValue", idx => this.props.value.get(idx) || (0, _immutable.Map)());

    _defineProperty(this, "handleRemove", (index, event) => {
      event.preventDefault();
      const {
        itemsCollapsed
      } = this.state;
      const {
        value,
        metadata,
        onChange,
        field,
        clearFieldErrors
      } = this.props;
      const collectionName = field.get('name');
      const isSingleField = this.getValueType() === valueTypes.SINGLE;
      const metadataRemovePath = isSingleField ? value.get(index) : value.get(index).valueSeq();
      const parsedMetadata = metadata && !metadata.isEmpty() ? {
        [collectionName]: metadata.removeIn(metadataRemovePath)
      } : metadata;
      itemsCollapsed.splice(index, 1); // clear validations

      this.validations = [];
      this.setState({
        itemsCollapsed: [...itemsCollapsed],
        keys: Array.from({
          length: value.size - 1
        }, () => (0, _v.default)())
      });
      onChange(value.remove(index), parsedMetadata);
      clearFieldErrors();
    });

    _defineProperty(this, "handleItemCollapseToggle", (index, event) => {
      event.preventDefault();
      const {
        itemsCollapsed
      } = this.state;
      const newItemsCollapsed = itemsCollapsed.map((collapsed, itemIndex) => {
        if (index === itemIndex) {
          return !collapsed;
        }

        return collapsed;
      });
      this.setState({
        itemsCollapsed: newItemsCollapsed
      });
    });

    _defineProperty(this, "handleCollapseAllToggle", e => {
      e.preventDefault();
      const {
        value,
        field
      } = this.props;
      const {
        itemsCollapsed,
        listCollapsed
      } = this.state;
      const minimizeCollapsedItems = field.get('minimize_collapsed', false);
      const listCollapsedByDefault = field.get('collapsed', true);
      const allItemsCollapsed = itemsCollapsed.every(val => val === true);

      if (minimizeCollapsedItems) {
        let updatedItemsCollapsed = itemsCollapsed; // Only allow collapsing all items in this mode but not opening all at once

        if (!listCollapsed || !listCollapsedByDefault) {
          updatedItemsCollapsed = Array(value.size).fill(!listCollapsed);
        }

        this.setState({
          listCollapsed: !listCollapsed,
          itemsCollapsed: updatedItemsCollapsed
        });
      } else {
        this.setState({
          itemsCollapsed: Array(value.size).fill(!allItemsCollapsed)
        });
      }
    });

    _defineProperty(this, "onSortEnd", ({
      oldIndex,
      newIndex
    }) => {
      const {
        value,
        clearFieldErrors
      } = this.props;
      const {
        itemsCollapsed,
        keys
      } = this.state; // Update value

      const item = value.get(oldIndex);
      const newValue = value.delete(oldIndex).insert(newIndex, item);
      this.props.onChange(newValue); // Update collapsing

      const collapsed = itemsCollapsed[oldIndex];
      itemsCollapsed.splice(oldIndex, 1);
      const updatedItemsCollapsed = [...itemsCollapsed];
      updatedItemsCollapsed.splice(newIndex, 0, collapsed); // Reset item to ensure updated state

      const updatedKeys = keys.map((key, keyIndex) => {
        if (keyIndex === oldIndex || keyIndex === newIndex) {
          return (0, _v.default)();
        }

        return key;
      });
      this.setState({
        itemsCollapsed: updatedItemsCollapsed,
        keys: updatedKeys
      }); //clear error fields and remove old validations

      clearFieldErrors();
      this.validations = this.validations.filter(item => updatedKeys.includes(item.key));
    });

    _defineProperty(this, "hasError", index => {
      const {
        fieldsErrors
      } = this.props;

      if (fieldsErrors && fieldsErrors.size > 0) {
        return Object.values(fieldsErrors.toJS()).some(arr => arr.some(err => err.parentIds && err.parentIds.includes(this.state.keys[index])));
      }
    });

    _defineProperty(this, "renderItem", (item, index) => {
      const {
        classNameWrapper,
        editorControl,
        onValidateObject,
        metadata,
        clearFieldErrors,
        fieldsErrors,
        controlRef,
        resolveWidget,
        parentIds,
        forID,
        t
      } = this.props;
      const {
        itemsCollapsed,
        keys
      } = this.state;
      const collapsed = itemsCollapsed[index];
      const key = keys[index];
      let field = this.props.field;
      const hasError = this.hasError(index);
      const isVariableTypesList = this.getValueType() === valueTypes.MIXED;

      if (isVariableTypesList) {
        field = (0, _typedListHelpers.getTypedFieldForValue)(field, item);

        if (!field) {
          return this.renderErroneousTypedItem(index, item);
        }
      }

      return (0, _core.jsx)(SortableListItem, {
        css: /*#__PURE__*/(0, _core.css)([styles.listControlItem, collapsed && styles.listControlItemCollapsed], ";label:ListControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
        index: index,
        key: key
      }, isVariableTypesList && (0, _core.jsx)(LabelComponent, {
        field: field,
        isActive: false,
        hasErrors: hasError,
        uniqueFieldId: this.uniqueFieldId,
        isFieldOptional: field.get('required') === false,
        t: t
      }), (0, _core.jsx)(StyledListItemTopBar, {
        collapsed: collapsed,
        onCollapseToggle: (0, _partial2.default)(this.handleItemCollapseToggle, index),
        onRemove: (0, _partial2.default)(this.handleRemove, index),
        dragHandleHOC: _reactSortableHoc.SortableHandle,
        "data-testid": `styled-list-item-top-bar-${key}`
      }), (0, _core.jsx)(NestedObjectLabel, {
        collapsed: collapsed,
        error: hasError
      }, this.objectLabel(item)), (0, _core.jsx)(_core.ClassNames, null, ({
        css,
        cx
      }) => (0, _core.jsx)(ObjectControl, {
        classNameWrapper: cx(classNameWrapper, {
          [css`
                  ${styleStrings.collapsedObjectControl};
                `]: collapsed
        }),
        value: item,
        field: field,
        onChangeObject: this.handleChangeFor(index),
        editorControl: editorControl,
        resolveWidget: resolveWidget,
        metadata: metadata,
        forList: true,
        onValidateObject: onValidateObject,
        clearFieldErrors: clearFieldErrors,
        fieldsErrors: fieldsErrors,
        ref: this.processControlRef,
        controlRef: controlRef,
        validationKey: key,
        collapsed: collapsed,
        "data-testid": `object-control-${key}`,
        hasError: hasError,
        parentIds: [...parentIds, forID, key]
      })));
    });

    const {
      field: _field,
      value: _value
    } = props;

    const _listCollapsed = _field.get('collapsed', true);

    const _itemsCollapsed = _value && Array(_value.size).fill(_listCollapsed) || [];

    const _keys = _value && Array.from({
      length: _value.size
    }, () => (0, _v.default)()) || [];

    this.state = {
      listCollapsed: _listCollapsed,
      itemsCollapsed: _itemsCollapsed,
      value: this.valueToString(_value),
      keys: _keys
    };
  }

  /**
   * Always update so that each nested widget has the option to update. This is
   * required because ControlHOC provides a default `shouldComponentUpdate`
   * which only updates if the value changes, but every widget must be allowed
   * to override this.
   */
  shouldComponentUpdate() {
    return true;
  }

  handleChangeFor(index) {
    return (f, newValue, newMetadata) => {
      const {
        value,
        metadata,
        onChange,
        field
      } = this.props;
      const collectionName = field.get('name');
      const listFieldObjectWidget = field.getIn(['field', 'widget']) === 'object';
      const withNameKey = this.getValueType() !== valueTypes.SINGLE || this.getValueType() === valueTypes.SINGLE && listFieldObjectWidget;
      const newObjectValue = withNameKey ? this.getObjectValue(index).set(f.get('name'), newValue) : newValue;
      const parsedMetadata = {
        [collectionName]: Object.assign(metadata ? metadata.toJS() : {}, newMetadata || {})
      };
      onChange(value.set(index, newObjectValue), parsedMetadata);
    };
  }

  objectLabel(item) {
    const {
      field,
      entry
    } = this.props;
    const valueType = this.getValueType();

    switch (valueType) {
      case valueTypes.MIXED:
        {
          if (!validateItem(field, item)) {
            return;
          }

          const itemType = (0, _typedListHelpers.getTypedFieldForValue)(field, item);
          const label = itemType.get('label', itemType.get('name')); // each type can have its own summary, but default to the list summary if exists

          const summary = itemType.get('summary', field.get('summary'));
          const labelReturn = summary ? handleSummary(summary, entry, label, item) : label;
          return labelReturn;
        }

      case valueTypes.SINGLE:
        {
          const singleField = field.get('field');
          const label = singleField.get('label', singleField.get('name'));
          const summary = field.get('summary');
          const data = (0, _immutable.fromJS)({
            [singleField.get('name')]: item
          });
          const labelReturn = summary ? handleSummary(summary, entry, label, data) : label;
          return labelReturn;
        }

      case valueTypes.MULTIPLE:
        {
          if (!validateItem(field, item)) {
            return;
          }

          const multiFields = field.get('fields');
          const labelField = multiFields && multiFields.first();
          const value = item.get(labelField.get('name'));
          const summary = field.get('summary');
          const labelReturn = summary ? handleSummary(summary, entry, value, item) : value;
          return (labelReturn || `No ${labelField.get('name')}`).toString();
        }
    }

    return '';
  }

  renderErroneousTypedItem(index, item) {
    const field = this.props.field;
    const errorMessage = (0, _typedListHelpers.getErrorMessageForTypedFieldAndValue)(field, item);
    const key = `item-${index}`;
    return (0, _core.jsx)(SortableListItem, {
      css: /*#__PURE__*/(0, _core.css)([styles.listControlItem, styles.listControlItemCollapsed], ";label:ListControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9MaXN0Q29udHJvbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2a0JRIiwiZmlsZSI6Ii4uLy4uL3NyYy9MaXN0Q29udHJvbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcywgQ2xhc3NOYW1lcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHsgTGlzdCwgTWFwLCBmcm9tSlMgfSBmcm9tICdpbW11dGFibGUnO1xuaW1wb3J0IHsgcGFydGlhbCwgaXNFbXB0eSwgdW5pcXVlSWQgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHV1aWQgZnJvbSAndXVpZC92NCc7XG5pbXBvcnQgeyBTb3J0YWJsZUNvbnRhaW5lciwgU29ydGFibGVFbGVtZW50LCBTb3J0YWJsZUhhbmRsZSB9IGZyb20gJ3JlYWN0LXNvcnRhYmxlLWhvYyc7XG5pbXBvcnQgTmV0bGlmeUNtc1dpZGdldE9iamVjdCBmcm9tICduZXRsaWZ5LWNtcy13aWRnZXQtb2JqZWN0JztcbmltcG9ydCB7XG4gIExpc3RJdGVtVG9wQmFyLFxuICBPYmplY3RXaWRnZXRUb3BCYXIsXG4gIGNvbG9ycyxcbiAgbGVuZ3RocyxcbiAgRmllbGRMYWJlbCxcbn0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBzdHJpbmdUZW1wbGF0ZSwgdmFsaWRhdGlvbnMgfSBmcm9tICduZXRsaWZ5LWNtcy1saWItd2lkZ2V0cyc7XG5cbmltcG9ydCB7XG4gIFRZUEVTX0tFWSxcbiAgZ2V0VHlwZWRGaWVsZEZvclZhbHVlLFxuICByZXNvbHZlRmllbGRLZXlUeXBlLFxuICBnZXRFcnJvck1lc3NhZ2VGb3JUeXBlZEZpZWxkQW5kVmFsdWUsXG59IGZyb20gJy4vdHlwZWRMaXN0SGVscGVycyc7XG5cbmNvbnN0IE9iamVjdENvbnRyb2wgPSBOZXRsaWZ5Q21zV2lkZ2V0T2JqZWN0LmNvbnRyb2xDb21wb25lbnQ7XG5cbmNvbnN0IExpc3RJdGVtID0gc3R5bGVkLmRpdigpO1xuXG5jb25zdCBTb3J0YWJsZUxpc3RJdGVtID0gU29ydGFibGVFbGVtZW50KExpc3RJdGVtKTtcblxuY29uc3QgU3R5bGVkTGlzdEl0ZW1Ub3BCYXIgPSBzdHlsZWQoTGlzdEl0ZW1Ub3BCYXIpYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuYDtcblxuY29uc3QgTmVzdGVkT2JqZWN0TGFiZWwgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiAke3Byb3BzID0+IChwcm9wcy5jb2xsYXBzZWQgPyAnYmxvY2snIDogJ25vbmUnKX07XG4gIGJvcmRlci10b3A6IDA7XG4gIGNvbG9yOiAke3Byb3BzID0+IChwcm9wcy5lcnJvciA/IGNvbG9ycy5lcnJvclRleHQgOiAnaW5oZXJpdCcpfTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgcGFkZGluZzogMTNweDtcbiAgYm9yZGVyLXJhZGl1czogMCAwICR7bGVuZ3Rocy5ib3JkZXJSYWRpdXN9ICR7bGVuZ3Rocy5ib3JkZXJSYWRpdXN9O1xuYDtcblxuY29uc3Qgc3R5bGVTdHJpbmdzID0ge1xuICBjb2xsYXBzZWRPYmplY3RDb250cm9sOiBgXG4gICAgZGlzcGxheTogbm9uZTtcbiAgYCxcbiAgb2JqZWN0V2lkZ2V0VG9wQmFyQ29udGFpbmVyOiBgXG4gICAgcGFkZGluZzogJHtsZW5ndGhzLm9iamVjdFdpZGdldFRvcEJhckNvbnRhaW5lclBhZGRpbmd9O1xuICBgLFxufTtcblxuY29uc3Qgc3R5bGVzID0ge1xuICBsaXN0Q29udHJvbEl0ZW06IGNzc2BcbiAgICBtYXJnaW4tdG9wOiAxOHB4O1xuXG4gICAgJjpmaXJzdC1vZi10eXBlIHtcbiAgICAgIG1hcmdpbi10b3A6IDI2cHg7XG4gICAgfVxuICBgLFxuICBsaXN0Q29udHJvbEl0ZW1Db2xsYXBzZWQ6IGNzc2BcbiAgICBwYWRkaW5nLWJvdHRvbTogMDtcbiAgYCxcbn07XG5cbmNvbnN0IFNvcnRhYmxlTGlzdCA9IFNvcnRhYmxlQ29udGFpbmVyKCh7IGl0ZW1zLCByZW5kZXJJdGVtIH0pID0+IHtcbiAgcmV0dXJuIDxkaXY+e2l0ZW1zLm1hcChyZW5kZXJJdGVtKX08L2Rpdj47XG59KTtcblxuY29uc3QgdmFsdWVUeXBlcyA9IHtcbiAgU0lOR0xFOiAnU0lOR0xFJyxcbiAgTVVMVElQTEU6ICdNVUxUSVBMRScsXG4gIE1JWEVEOiAnTUlYRUQnLFxufTtcblxuZnVuY3Rpb24gaGFuZGxlU3VtbWFyeShzdW1tYXJ5LCBlbnRyeSwgbGFiZWwsIGl0ZW0pIHtcbiAgY29uc3QgZGF0YSA9IHN0cmluZ1RlbXBsYXRlLmFkZEZpbGVUZW1wbGF0ZUZpZWxkcyhcbiAgICBlbnRyeS5nZXQoJ3BhdGgnKSxcbiAgICBpdGVtLnNldCgnZmllbGRzLmxhYmVsJywgbGFiZWwpLFxuICApO1xuICByZXR1cm4gc3RyaW5nVGVtcGxhdGUuY29tcGlsZVN0cmluZ1RlbXBsYXRlKHN1bW1hcnksIG51bGwsICcnLCBkYXRhKTtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVJdGVtKGZpZWxkLCBpdGVtKSB7XG4gIGlmICghTWFwLmlzTWFwKGl0ZW0pKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgYCcke2ZpZWxkLmdldCgnbmFtZScpfScgZmllbGQgaXRlbSB2YWx1ZSB2YWx1ZSBzaG91bGQgYmUgYSBtYXAgYnV0IGlzIGEgJyR7dHlwZW9mIGl0ZW19J2AsXG4gICAgKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIExhYmVsQ29tcG9uZW50KHsgZmllbGQsIGlzQWN0aXZlLCBoYXNFcnJvcnMsIHVuaXF1ZUZpZWxkSWQsIGlzRmllbGRPcHRpb25hbCwgdCB9KSB7XG4gIGNvbnN0IGxhYmVsID0gYCR7ZmllbGQuZ2V0KCdsYWJlbCcsIGZpZWxkLmdldCgnbmFtZScpKX1gO1xuICByZXR1cm4gKFxuICAgIDxGaWVsZExhYmVsIGlzQWN0aXZlPXtpc0FjdGl2ZX0gaGFzRXJyb3JzPXtoYXNFcnJvcnN9IGh0bWxGb3I9e3VuaXF1ZUZpZWxkSWR9PlxuICAgICAge2xhYmVsfSB7YCR7aXNGaWVsZE9wdGlvbmFsID8gYCAoJHt0KCdlZGl0b3IuZWRpdG9yQ29udHJvbC5maWVsZC5vcHRpb25hbCcpfSlgIDogJyd9YH1cbiAgICA8L0ZpZWxkTGFiZWw+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpc3RDb250cm9sIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgdmFsaWRhdGlvbnMgPSBbXTtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG1ldGFkYXRhOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uQ2hhbmdlT2JqZWN0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9uVmFsaWRhdGVPYmplY3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdmFsaWRhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdmFsdWU6IEltbXV0YWJsZVByb3BUeXBlcy5saXN0LFxuICAgIGZpZWxkOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGZvcklEOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbnRyb2xSZWY6IFByb3BUeXBlcy5mdW5jLFxuICAgIG1lZGlhUGF0aHM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBnZXRBc3NldDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbk9wZW5NZWRpYUxpYnJhcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25BZGRBc3NldDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblJlbW92ZUluc2VydGVkTWVkaWE6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY2xhc3NOYW1lV3JhcHBlcjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgIHNldEFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNldEluYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZWRpdG9yQ29udHJvbDogUHJvcFR5cGVzLmVsZW1lbnRUeXBlLmlzUmVxdWlyZWQsXG4gICAgcmVzb2x2ZVdpZGdldDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjbGVhckZpZWxkRXJyb3JzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGZpZWxkc0Vycm9yczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGVudHJ5OiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICB2YWx1ZTogTGlzdCgpLFxuICAgIHBhcmVudElkczogW10sXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgY29uc3QgeyBmaWVsZCwgdmFsdWUgfSA9IHByb3BzO1xuICAgIGNvbnN0IGxpc3RDb2xsYXBzZWQgPSBmaWVsZC5nZXQoJ2NvbGxhcHNlZCcsIHRydWUpO1xuICAgIGNvbnN0IGl0ZW1zQ29sbGFwc2VkID0gKHZhbHVlICYmIEFycmF5KHZhbHVlLnNpemUpLmZpbGwobGlzdENvbGxhcHNlZCkpIHx8IFtdO1xuICAgIGNvbnN0IGtleXMgPSAodmFsdWUgJiYgQXJyYXkuZnJvbSh7IGxlbmd0aDogdmFsdWUuc2l6ZSB9LCAoKSA9PiB1dWlkKCkpKSB8fCBbXTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsaXN0Q29sbGFwc2VkLFxuICAgICAgaXRlbXNDb2xsYXBzZWQsXG4gICAgICB2YWx1ZTogdGhpcy52YWx1ZVRvU3RyaW5nKHZhbHVlKSxcbiAgICAgIGtleXMsXG4gICAgfTtcbiAgfVxuXG4gIHZhbHVlVG9TdHJpbmcgPSB2YWx1ZSA9PiB7XG4gICAgbGV0IHN0cmluZ1ZhbHVlO1xuICAgIGlmIChMaXN0LmlzTGlzdCh2YWx1ZSkgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHN0cmluZ1ZhbHVlID0gdmFsdWUuam9pbignLCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBFeHBlY3RlZCBMaXN0IHZhbHVlIHRvIGJlIGFuIGFycmF5IGJ1dCByZWNlaXZlZCAnJHt2YWx1ZX0nIHdpdGggdHlwZSBvZiAnJHt0eXBlb2YgdmFsdWV9Jy4gUGxlYXNlIGNoZWNrIHRoZSB2YWx1ZSBwcm92aWRlZCB0byB0aGUgJyR7dGhpcy5wcm9wcy5maWVsZC5nZXQoXG4gICAgICAgICAgJ25hbWUnLFxuICAgICAgICApfScgZmllbGRgLFxuICAgICAgKTtcbiAgICAgIHN0cmluZ1ZhbHVlID0gU3RyaW5nKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZ1ZhbHVlLnJlcGxhY2UoLywoW15cXHNdfCQpL2csICcsICQxJyk7XG4gIH07XG5cbiAgZ2V0VmFsdWVUeXBlID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKGZpZWxkLmdldCgnZmllbGRzJykpIHtcbiAgICAgIHJldHVybiB2YWx1ZVR5cGVzLk1VTFRJUExFO1xuICAgIH0gZWxzZSBpZiAoZmllbGQuZ2V0KCdmaWVsZCcpKSB7XG4gICAgICByZXR1cm4gdmFsdWVUeXBlcy5TSU5HTEU7XG4gICAgfSBlbHNlIGlmIChmaWVsZC5nZXQoVFlQRVNfS0VZKSkge1xuICAgICAgcmV0dXJuIHZhbHVlVHlwZXMuTUlYRUQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfTtcblxuICB1bmlxdWVGaWVsZElkID0gdW5pcXVlSWQoYCR7dGhpcy5wcm9wcy5maWVsZC5nZXQoJ25hbWUnKX0tZmllbGQtYCk7XG4gIC8qKlxuICAgKiBBbHdheXMgdXBkYXRlIHNvIHRoYXQgZWFjaCBuZXN0ZWQgd2lkZ2V0IGhhcyB0aGUgb3B0aW9uIHRvIHVwZGF0ZS4gVGhpcyBpc1xuICAgKiByZXF1aXJlZCBiZWNhdXNlIENvbnRyb2xIT0MgcHJvdmlkZXMgYSBkZWZhdWx0IGBzaG91bGRDb21wb25lbnRVcGRhdGVgXG4gICAqIHdoaWNoIG9ubHkgdXBkYXRlcyBpZiB0aGUgdmFsdWUgY2hhbmdlcywgYnV0IGV2ZXJ5IHdpZGdldCBtdXN0IGJlIGFsbG93ZWRcbiAgICogdG8gb3ZlcnJpZGUgdGhpcy5cbiAgICovXG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZSA9IGUgPT4ge1xuICAgIGNvbnN0IHsgb25DaGFuZ2UgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLnN0YXRlLnZhbHVlO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gZS50YXJnZXQudmFsdWUudHJpbSgpO1xuICAgIGNvbnN0IGxpc3RWYWx1ZSA9IG5ld1ZhbHVlID8gbmV3VmFsdWUuc3BsaXQoJywnKSA6IFtdO1xuICAgIGlmIChuZXdWYWx1ZS5tYXRjaCgvLCQvKSAmJiBvbGRWYWx1ZS5tYXRjaCgvLCAkLykpIHtcbiAgICAgIGxpc3RWYWx1ZS5wb3AoKTtcbiAgICB9XG5cbiAgICBjb25zdCBwYXJzZWRWYWx1ZSA9IHRoaXMudmFsdWVUb1N0cmluZyhsaXN0VmFsdWUpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogcGFyc2VkVmFsdWUgfSk7XG4gICAgb25DaGFuZ2UoTGlzdChsaXN0VmFsdWUubWFwKHZhbCA9PiB2YWwudHJpbSgpKSkpO1xuICB9O1xuXG4gIGhhbmRsZUZvY3VzID0gKCkgPT4ge1xuICAgIHRoaXMucHJvcHMuc2V0QWN0aXZlU3R5bGUoKTtcbiAgfTtcblxuICBoYW5kbGVCbHVyID0gZSA9PiB7XG4gICAgY29uc3QgbGlzdFZhbHVlID0gZS50YXJnZXQudmFsdWVcbiAgICAgIC5zcGxpdCgnLCcpXG4gICAgICAubWFwKGVsID0+IGVsLnRyaW0oKSlcbiAgICAgIC5maWx0ZXIoZWwgPT4gZWwpO1xuICAgIHRoaXMuc2V0U3RhdGUoeyB2YWx1ZTogdGhpcy52YWx1ZVRvU3RyaW5nKGxpc3RWYWx1ZSkgfSk7XG4gICAgdGhpcy5wcm9wcy5zZXRJbmFjdGl2ZVN0eWxlKCk7XG4gIH07XG5cbiAgaGFuZGxlQWRkID0gZSA9PiB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IHsgZmllbGQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgcGFyc2VkVmFsdWUgPVxuICAgICAgdGhpcy5nZXRWYWx1ZVR5cGUoKSA9PT0gdmFsdWVUeXBlcy5TSU5HTEVcbiAgICAgICAgPyB0aGlzLnNpbmdsZURlZmF1bHQoKVxuICAgICAgICA6IGZyb21KUyh0aGlzLm11bHRpcGxlRGVmYXVsdChmaWVsZC5nZXQoJ2ZpZWxkcycpKSk7XG4gICAgdGhpcy5hZGRJdGVtKHBhcnNlZFZhbHVlKTtcbiAgfTtcblxuICBzaW5nbGVEZWZhdWx0ID0gKCkgPT4ge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmZpZWxkLmdldEluKFsnZmllbGQnLCAnZGVmYXVsdCddLCBudWxsKTtcbiAgfTtcblxuICBtdWx0aXBsZURlZmF1bHQgPSBmaWVsZHMgPT4ge1xuICAgIHJldHVybiB0aGlzLmdldEZpZWxkc0RlZmF1bHQoZmllbGRzKTtcbiAgfTtcblxuICBoYW5kbGVBZGRUeXBlID0gKHR5cGUsIHR5cGVLZXkpID0+IHtcbiAgICBjb25zdCBwYXJzZWRWYWx1ZSA9IGZyb21KUyh0aGlzLm1peGVkRGVmYXVsdCh0eXBlS2V5LCB0eXBlKSk7XG4gICAgdGhpcy5hZGRJdGVtKHBhcnNlZFZhbHVlKTtcbiAgfTtcblxuICBtaXhlZERlZmF1bHQgPSAodHlwZUtleSwgdHlwZSkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGVkVHlwZSA9IHRoaXMucHJvcHMuZmllbGQuZ2V0KFRZUEVTX0tFWSkuZmluZChmID0+IGYuZ2V0KCduYW1lJykgPT09IHR5cGUpO1xuICAgIGNvbnN0IGZpZWxkcyA9IHNlbGVjdGVkVHlwZS5nZXQoJ2ZpZWxkcycpIHx8IFtzZWxlY3RlZFR5cGUuZ2V0KCdmaWVsZCcpXTtcblxuICAgIHJldHVybiB0aGlzLmdldEZpZWxkc0RlZmF1bHQoZmllbGRzLCB7IFt0eXBlS2V5XTogdHlwZSB9KTtcbiAgfTtcblxuICBnZXRGaWVsZHNEZWZhdWx0ID0gKGZpZWxkcywgaW5pdGlhbFZhbHVlID0ge30pID0+IHtcbiAgICByZXR1cm4gZmllbGRzLnJlZHVjZSgoYWNjLCBpdGVtKSA9PiB7XG4gICAgICBjb25zdCBzdWJmaWVsZHMgPSBpdGVtLmdldCgnZmllbGQnKSB8fCBpdGVtLmdldCgnZmllbGRzJyk7XG4gICAgICBjb25zdCBvYmplY3QgPSBpdGVtLmdldCgnd2lkZ2V0JykgPT0gJ29iamVjdCc7XG4gICAgICBjb25zdCBuYW1lID0gaXRlbS5nZXQoJ25hbWUnKTtcbiAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IGl0ZW0uZ2V0KCdkZWZhdWx0JywgbnVsbCk7XG5cbiAgICAgIGlmIChMaXN0LmlzTGlzdChzdWJmaWVsZHMpICYmIG9iamVjdCkge1xuICAgICAgICBjb25zdCBzdWJEZWZhdWx0VmFsdWUgPSB0aGlzLmdldEZpZWxkc0RlZmF1bHQoc3ViZmllbGRzKTtcbiAgICAgICAgIWlzRW1wdHkoc3ViRGVmYXVsdFZhbHVlKSAmJiAoYWNjW25hbWVdID0gc3ViRGVmYXVsdFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgIH1cblxuICAgICAgaWYgKE1hcC5pc01hcChzdWJmaWVsZHMpICYmIG9iamVjdCkge1xuICAgICAgICBjb25zdCBzdWJEZWZhdWx0VmFsdWUgPSB0aGlzLmdldEZpZWxkc0RlZmF1bHQoW3N1YmZpZWxkc10pO1xuICAgICAgICAhaXNFbXB0eShzdWJEZWZhdWx0VmFsdWUpICYmIChhY2NbbmFtZV0gPSBzdWJEZWZhdWx0VmFsdWUpO1xuICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGVmYXVsdFZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgIGFjY1tuYW1lXSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBpbml0aWFsVmFsdWUpO1xuICB9O1xuXG4gIGFkZEl0ZW0gPSBwYXJzZWRWYWx1ZSA9PiB7XG4gICAgY29uc3QgeyB2YWx1ZSwgb25DaGFuZ2UsIGZpZWxkIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGFkZFRvVG9wID0gZmllbGQuZ2V0KCdhZGRfdG9fdG9wJywgZmFsc2UpO1xuXG4gICAgY29uc3QgaXRlbUtleSA9IHV1aWQoKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGl0ZW1zQ29sbGFwc2VkOiBhZGRUb1RvcFxuICAgICAgICA/IFtmYWxzZSwgLi4udGhpcy5zdGF0ZS5pdGVtc0NvbGxhcHNlZF1cbiAgICAgICAgOiBbLi4udGhpcy5zdGF0ZS5pdGVtc0NvbGxhcHNlZCwgZmFsc2VdLFxuICAgICAga2V5czogYWRkVG9Ub3AgPyBbaXRlbUtleSwgLi4udGhpcy5zdGF0ZS5rZXlzXSA6IFsuLi50aGlzLnN0YXRlLmtleXMsIGl0ZW1LZXldLFxuICAgIH0pO1xuXG4gICAgY29uc3QgbGlzdFZhbHVlID0gdmFsdWUgfHwgTGlzdCgpO1xuICAgIGlmIChhZGRUb1RvcCkge1xuICAgICAgb25DaGFuZ2UobGlzdFZhbHVlLnVuc2hpZnQocGFyc2VkVmFsdWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25DaGFuZ2UobGlzdFZhbHVlLnB1c2gocGFyc2VkVmFsdWUpKTtcbiAgICB9XG4gIH07XG5cbiAgcHJvY2Vzc0NvbnRyb2xSZWYgPSByZWYgPT4ge1xuICAgIGlmICghcmVmKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgdmFsaWRhdGUsXG4gICAgICBwcm9wczogeyB2YWxpZGF0aW9uS2V5OiBrZXkgfSxcbiAgICB9ID0gcmVmO1xuICAgIHRoaXMudmFsaWRhdGlvbnMucHVzaCh7IGtleSwgdmFsaWRhdGUgfSk7XG4gIH07XG5cbiAgdmFsaWRhdGUgPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMuZ2V0VmFsdWVUeXBlKCkpIHtcbiAgICAgIHRoaXMudmFsaWRhdGlvbnMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgaXRlbS52YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucHJvcHMudmFsaWRhdGUoKTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vblZhbGlkYXRlT2JqZWN0KHRoaXMucHJvcHMuZm9ySUQsIHRoaXMudmFsaWRhdGVTaXplKCkpO1xuICB9O1xuXG4gIHZhbGlkYXRlU2l6ZSA9ICgpID0+IHtcbiAgICBjb25zdCB7IGZpZWxkLCB2YWx1ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBtaW4gPSBmaWVsZC5nZXQoJ21pbicpO1xuICAgIGNvbnN0IG1heCA9IGZpZWxkLmdldCgnbWF4Jyk7XG4gICAgY29uc3QgcmVxdWlyZWQgPSBmaWVsZC5nZXQoJ3JlcXVpcmVkJywgdHJ1ZSk7XG5cbiAgICBpZiAoIXJlcXVpcmVkICYmICF2YWx1ZT8uc2l6ZSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGNvbnN0IGVycm9yID0gdmFsaWRhdGlvbnMudmFsaWRhdGVNaW5NYXgoXG4gICAgICB0LFxuICAgICAgZmllbGQuZ2V0KCdsYWJlbCcsIGZpZWxkLmdldCgnbmFtZScpKSxcbiAgICAgIHZhbHVlLFxuICAgICAgbWluLFxuICAgICAgbWF4LFxuICAgICk7XG5cbiAgICByZXR1cm4gZXJyb3IgPyBbZXJyb3JdIDogW107XG4gIH07XG5cbiAgLyoqXG4gICAqIEluIGNhc2UgdGhlIGBvbkNoYW5nZU9iamVjdGAgZnVuY3Rpb24gaXMgZnJvemVuIGJ5IGEgY2hpbGQgd2lkZ2V0IGltcGxlbWVudGF0aW9uLFxuICAgKiBlLmcuIHdoZW4gZGVib3VuY2VkLCBhbHdheXMgZ2V0IHRoZSBsYXRlc3Qgb2JqZWN0IHZhbHVlIGluc3RlYWQgb2YgdXNpbmdcbiAgICogYHRoaXMucHJvcHMudmFsdWVgIGRpcmVjdGx5LlxuICAgKi9cbiAgZ2V0T2JqZWN0VmFsdWUgPSBpZHggPT4gdGhpcy5wcm9wcy52YWx1ZS5nZXQoaWR4KSB8fCBNYXAoKTtcblxuICBoYW5kbGVDaGFuZ2VGb3IoaW5kZXgpIHtcbiAgICByZXR1cm4gKGYsIG5ld1ZhbHVlLCBuZXdNZXRhZGF0YSkgPT4ge1xuICAgICAgY29uc3QgeyB2YWx1ZSwgbWV0YWRhdGEsIG9uQ2hhbmdlLCBmaWVsZCB9ID0gdGhpcy5wcm9wcztcbiAgICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gZmllbGQuZ2V0KCduYW1lJyk7XG4gICAgICBjb25zdCBsaXN0RmllbGRPYmplY3RXaWRnZXQgPSBmaWVsZC5nZXRJbihbJ2ZpZWxkJywgJ3dpZGdldCddKSA9PT0gJ29iamVjdCc7XG4gICAgICBjb25zdCB3aXRoTmFtZUtleSA9XG4gICAgICAgIHRoaXMuZ2V0VmFsdWVUeXBlKCkgIT09IHZhbHVlVHlwZXMuU0lOR0xFIHx8XG4gICAgICAgICh0aGlzLmdldFZhbHVlVHlwZSgpID09PSB2YWx1ZVR5cGVzLlNJTkdMRSAmJiBsaXN0RmllbGRPYmplY3RXaWRnZXQpO1xuICAgICAgY29uc3QgbmV3T2JqZWN0VmFsdWUgPSB3aXRoTmFtZUtleVxuICAgICAgICA/IHRoaXMuZ2V0T2JqZWN0VmFsdWUoaW5kZXgpLnNldChmLmdldCgnbmFtZScpLCBuZXdWYWx1ZSlcbiAgICAgICAgOiBuZXdWYWx1ZTtcbiAgICAgIGNvbnN0IHBhcnNlZE1ldGFkYXRhID0ge1xuICAgICAgICBbY29sbGVjdGlvbk5hbWVdOiBPYmplY3QuYXNzaWduKG1ldGFkYXRhID8gbWV0YWRhdGEudG9KUygpIDoge30sIG5ld01ldGFkYXRhIHx8IHt9KSxcbiAgICAgIH07XG4gICAgICBvbkNoYW5nZSh2YWx1ZS5zZXQoaW5kZXgsIG5ld09iamVjdFZhbHVlKSwgcGFyc2VkTWV0YWRhdGEpO1xuICAgIH07XG4gIH1cblxuICBoYW5kbGVSZW1vdmUgPSAoaW5kZXgsIGV2ZW50KSA9PiB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IGl0ZW1zQ29sbGFwc2VkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgdmFsdWUsIG1ldGFkYXRhLCBvbkNoYW5nZSwgZmllbGQsIGNsZWFyRmllbGRFcnJvcnMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgY29sbGVjdGlvbk5hbWUgPSBmaWVsZC5nZXQoJ25hbWUnKTtcbiAgICBjb25zdCBpc1NpbmdsZUZpZWxkID0gdGhpcy5nZXRWYWx1ZVR5cGUoKSA9PT0gdmFsdWVUeXBlcy5TSU5HTEU7XG5cbiAgICBjb25zdCBtZXRhZGF0YVJlbW92ZVBhdGggPSBpc1NpbmdsZUZpZWxkID8gdmFsdWUuZ2V0KGluZGV4KSA6IHZhbHVlLmdldChpbmRleCkudmFsdWVTZXEoKTtcbiAgICBjb25zdCBwYXJzZWRNZXRhZGF0YSA9XG4gICAgICBtZXRhZGF0YSAmJiAhbWV0YWRhdGEuaXNFbXB0eSgpXG4gICAgICAgID8geyBbY29sbGVjdGlvbk5hbWVdOiBtZXRhZGF0YS5yZW1vdmVJbihtZXRhZGF0YVJlbW92ZVBhdGgpIH1cbiAgICAgICAgOiBtZXRhZGF0YTtcblxuICAgIGl0ZW1zQ29sbGFwc2VkLnNwbGljZShpbmRleCwgMSk7XG4gICAgLy8gY2xlYXIgdmFsaWRhdGlvbnNcbiAgICB0aGlzLnZhbGlkYXRpb25zID0gW107XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGl0ZW1zQ29sbGFwc2VkOiBbLi4uaXRlbXNDb2xsYXBzZWRdLFxuICAgICAga2V5czogQXJyYXkuZnJvbSh7IGxlbmd0aDogdmFsdWUuc2l6ZSAtIDEgfSwgKCkgPT4gdXVpZCgpKSxcbiAgICB9KTtcblxuICAgIG9uQ2hhbmdlKHZhbHVlLnJlbW92ZShpbmRleCksIHBhcnNlZE1ldGFkYXRhKTtcbiAgICBjbGVhckZpZWxkRXJyb3JzKCk7XG4gIH07XG5cbiAgaGFuZGxlSXRlbUNvbGxhcHNlVG9nZ2xlID0gKGluZGV4LCBldmVudCkgPT4ge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgeyBpdGVtc0NvbGxhcHNlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBuZXdJdGVtc0NvbGxhcHNlZCA9IGl0ZW1zQ29sbGFwc2VkLm1hcCgoY29sbGFwc2VkLCBpdGVtSW5kZXgpID0+IHtcbiAgICAgIGlmIChpbmRleCA9PT0gaXRlbUluZGV4KSB7XG4gICAgICAgIHJldHVybiAhY29sbGFwc2VkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbGxhcHNlZDtcbiAgICB9KTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGl0ZW1zQ29sbGFwc2VkOiBuZXdJdGVtc0NvbGxhcHNlZCxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVDb2xsYXBzZUFsbFRvZ2dsZSA9IGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCB7IHZhbHVlLCBmaWVsZCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGl0ZW1zQ29sbGFwc2VkLCBsaXN0Q29sbGFwc2VkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IG1pbmltaXplQ29sbGFwc2VkSXRlbXMgPSBmaWVsZC5nZXQoJ21pbmltaXplX2NvbGxhcHNlZCcsIGZhbHNlKTtcbiAgICBjb25zdCBsaXN0Q29sbGFwc2VkQnlEZWZhdWx0ID0gZmllbGQuZ2V0KCdjb2xsYXBzZWQnLCB0cnVlKTtcbiAgICBjb25zdCBhbGxJdGVtc0NvbGxhcHNlZCA9IGl0ZW1zQ29sbGFwc2VkLmV2ZXJ5KHZhbCA9PiB2YWwgPT09IHRydWUpO1xuXG4gICAgaWYgKG1pbmltaXplQ29sbGFwc2VkSXRlbXMpIHtcbiAgICAgIGxldCB1cGRhdGVkSXRlbXNDb2xsYXBzZWQgPSBpdGVtc0NvbGxhcHNlZDtcbiAgICAgIC8vIE9ubHkgYWxsb3cgY29sbGFwc2luZyBhbGwgaXRlbXMgaW4gdGhpcyBtb2RlIGJ1dCBub3Qgb3BlbmluZyBhbGwgYXQgb25jZVxuICAgICAgaWYgKCFsaXN0Q29sbGFwc2VkIHx8ICFsaXN0Q29sbGFwc2VkQnlEZWZhdWx0KSB7XG4gICAgICAgIHVwZGF0ZWRJdGVtc0NvbGxhcHNlZCA9IEFycmF5KHZhbHVlLnNpemUpLmZpbGwoIWxpc3RDb2xsYXBzZWQpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxpc3RDb2xsYXBzZWQ6ICFsaXN0Q29sbGFwc2VkLCBpdGVtc0NvbGxhcHNlZDogdXBkYXRlZEl0ZW1zQ29sbGFwc2VkIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgaXRlbXNDb2xsYXBzZWQ6IEFycmF5KHZhbHVlLnNpemUpLmZpbGwoIWFsbEl0ZW1zQ29sbGFwc2VkKSB9KTtcbiAgICB9XG4gIH07XG5cbiAgb2JqZWN0TGFiZWwoaXRlbSkge1xuICAgIGNvbnN0IHsgZmllbGQsIGVudHJ5IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHZhbHVlVHlwZSA9IHRoaXMuZ2V0VmFsdWVUeXBlKCk7XG4gICAgc3dpdGNoICh2YWx1ZVR5cGUpIHtcbiAgICAgIGNhc2UgdmFsdWVUeXBlcy5NSVhFRDoge1xuICAgICAgICBpZiAoIXZhbGlkYXRlSXRlbShmaWVsZCwgaXRlbSkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbVR5cGUgPSBnZXRUeXBlZEZpZWxkRm9yVmFsdWUoZmllbGQsIGl0ZW0pO1xuICAgICAgICBjb25zdCBsYWJlbCA9IGl0ZW1UeXBlLmdldCgnbGFiZWwnLCBpdGVtVHlwZS5nZXQoJ25hbWUnKSk7XG4gICAgICAgIC8vIGVhY2ggdHlwZSBjYW4gaGF2ZSBpdHMgb3duIHN1bW1hcnksIGJ1dCBkZWZhdWx0IHRvIHRoZSBsaXN0IHN1bW1hcnkgaWYgZXhpc3RzXG4gICAgICAgIGNvbnN0IHN1bW1hcnkgPSBpdGVtVHlwZS5nZXQoJ3N1bW1hcnknLCBmaWVsZC5nZXQoJ3N1bW1hcnknKSk7XG4gICAgICAgIGNvbnN0IGxhYmVsUmV0dXJuID0gc3VtbWFyeSA/IGhhbmRsZVN1bW1hcnkoc3VtbWFyeSwgZW50cnksIGxhYmVsLCBpdGVtKSA6IGxhYmVsO1xuICAgICAgICByZXR1cm4gbGFiZWxSZXR1cm47XG4gICAgICB9XG4gICAgICBjYXNlIHZhbHVlVHlwZXMuU0lOR0xFOiB7XG4gICAgICAgIGNvbnN0IHNpbmdsZUZpZWxkID0gZmllbGQuZ2V0KCdmaWVsZCcpO1xuICAgICAgICBjb25zdCBsYWJlbCA9IHNpbmdsZUZpZWxkLmdldCgnbGFiZWwnLCBzaW5nbGVGaWVsZC5nZXQoJ25hbWUnKSk7XG4gICAgICAgIGNvbnN0IHN1bW1hcnkgPSBmaWVsZC5nZXQoJ3N1bW1hcnknKTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGZyb21KUyh7IFtzaW5nbGVGaWVsZC5nZXQoJ25hbWUnKV06IGl0ZW0gfSk7XG4gICAgICAgIGNvbnN0IGxhYmVsUmV0dXJuID0gc3VtbWFyeSA/IGhhbmRsZVN1bW1hcnkoc3VtbWFyeSwgZW50cnksIGxhYmVsLCBkYXRhKSA6IGxhYmVsO1xuICAgICAgICByZXR1cm4gbGFiZWxSZXR1cm47XG4gICAgICB9XG4gICAgICBjYXNlIHZhbHVlVHlwZXMuTVVMVElQTEU6IHtcbiAgICAgICAgaWYgKCF2YWxpZGF0ZUl0ZW0oZmllbGQsIGl0ZW0pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG11bHRpRmllbGRzID0gZmllbGQuZ2V0KCdmaWVsZHMnKTtcbiAgICAgICAgY29uc3QgbGFiZWxGaWVsZCA9IG11bHRpRmllbGRzICYmIG11bHRpRmllbGRzLmZpcnN0KCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaXRlbS5nZXQobGFiZWxGaWVsZC5nZXQoJ25hbWUnKSk7XG4gICAgICAgIGNvbnN0IHN1bW1hcnkgPSBmaWVsZC5nZXQoJ3N1bW1hcnknKTtcbiAgICAgICAgY29uc3QgbGFiZWxSZXR1cm4gPSBzdW1tYXJ5ID8gaGFuZGxlU3VtbWFyeShzdW1tYXJ5LCBlbnRyeSwgdmFsdWUsIGl0ZW0pIDogdmFsdWU7XG4gICAgICAgIHJldHVybiAobGFiZWxSZXR1cm4gfHwgYE5vICR7bGFiZWxGaWVsZC5nZXQoJ25hbWUnKX1gKS50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBvblNvcnRFbmQgPSAoeyBvbGRJbmRleCwgbmV3SW5kZXggfSkgPT4ge1xuICAgIGNvbnN0IHsgdmFsdWUsIGNsZWFyRmllbGRFcnJvcnMgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpdGVtc0NvbGxhcHNlZCwga2V5cyB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIC8vIFVwZGF0ZSB2YWx1ZVxuICAgIGNvbnN0IGl0ZW0gPSB2YWx1ZS5nZXQob2xkSW5kZXgpO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdmFsdWUuZGVsZXRlKG9sZEluZGV4KS5pbnNlcnQobmV3SW5kZXgsIGl0ZW0pO1xuICAgIHRoaXMucHJvcHMub25DaGFuZ2UobmV3VmFsdWUpO1xuXG4gICAgLy8gVXBkYXRlIGNvbGxhcHNpbmdcbiAgICBjb25zdCBjb2xsYXBzZWQgPSBpdGVtc0NvbGxhcHNlZFtvbGRJbmRleF07XG4gICAgaXRlbXNDb2xsYXBzZWQuc3BsaWNlKG9sZEluZGV4LCAxKTtcbiAgICBjb25zdCB1cGRhdGVkSXRlbXNDb2xsYXBzZWQgPSBbLi4uaXRlbXNDb2xsYXBzZWRdO1xuICAgIHVwZGF0ZWRJdGVtc0NvbGxhcHNlZC5zcGxpY2UobmV3SW5kZXgsIDAsIGNvbGxhcHNlZCk7XG5cbiAgICAvLyBSZXNldCBpdGVtIHRvIGVuc3VyZSB1cGRhdGVkIHN0YXRlXG4gICAgY29uc3QgdXBkYXRlZEtleXMgPSBrZXlzLm1hcCgoa2V5LCBrZXlJbmRleCkgPT4ge1xuICAgICAgaWYgKGtleUluZGV4ID09PSBvbGRJbmRleCB8fCBrZXlJbmRleCA9PT0gbmV3SW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHV1aWQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBrZXk7XG4gICAgfSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IGl0ZW1zQ29sbGFwc2VkOiB1cGRhdGVkSXRlbXNDb2xsYXBzZWQsIGtleXM6IHVwZGF0ZWRLZXlzIH0pO1xuXG4gICAgLy9jbGVhciBlcnJvciBmaWVsZHMgYW5kIHJlbW92ZSBvbGQgdmFsaWRhdGlvbnNcbiAgICBjbGVhckZpZWxkRXJyb3JzKCk7XG4gICAgdGhpcy52YWxpZGF0aW9ucyA9IHRoaXMudmFsaWRhdGlvbnMuZmlsdGVyKGl0ZW0gPT4gdXBkYXRlZEtleXMuaW5jbHVkZXMoaXRlbS5rZXkpKTtcbiAgfTtcblxuICBoYXNFcnJvciA9IGluZGV4ID0+IHtcbiAgICBjb25zdCB7IGZpZWxkc0Vycm9ycyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoZmllbGRzRXJyb3JzICYmIGZpZWxkc0Vycm9ycy5zaXplID4gMCkge1xuICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoZmllbGRzRXJyb3JzLnRvSlMoKSkuc29tZShhcnIgPT5cbiAgICAgICAgYXJyLnNvbWUoZXJyID0+IGVyci5wYXJlbnRJZHMgJiYgZXJyLnBhcmVudElkcy5pbmNsdWRlcyh0aGlzLnN0YXRlLmtleXNbaW5kZXhdKSksXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZGlzcGxheS1uYW1lXG4gIHJlbmRlckl0ZW0gPSAoaXRlbSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjbGFzc05hbWVXcmFwcGVyLFxuICAgICAgZWRpdG9yQ29udHJvbCxcbiAgICAgIG9uVmFsaWRhdGVPYmplY3QsXG4gICAgICBtZXRhZGF0YSxcbiAgICAgIGNsZWFyRmllbGRFcnJvcnMsXG4gICAgICBmaWVsZHNFcnJvcnMsXG4gICAgICBjb250cm9sUmVmLFxuICAgICAgcmVzb2x2ZVdpZGdldCxcbiAgICAgIHBhcmVudElkcyxcbiAgICAgIGZvcklELFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHsgaXRlbXNDb2xsYXBzZWQsIGtleXMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgY29sbGFwc2VkID0gaXRlbXNDb2xsYXBzZWRbaW5kZXhdO1xuICAgIGNvbnN0IGtleSA9IGtleXNbaW5kZXhdO1xuICAgIGxldCBmaWVsZCA9IHRoaXMucHJvcHMuZmllbGQ7XG4gICAgY29uc3QgaGFzRXJyb3IgPSB0aGlzLmhhc0Vycm9yKGluZGV4KTtcbiAgICBjb25zdCBpc1ZhcmlhYmxlVHlwZXNMaXN0ID0gdGhpcy5nZXRWYWx1ZVR5cGUoKSA9PT0gdmFsdWVUeXBlcy5NSVhFRDtcbiAgICBpZiAoaXNWYXJpYWJsZVR5cGVzTGlzdCkge1xuICAgICAgZmllbGQgPSBnZXRUeXBlZEZpZWxkRm9yVmFsdWUoZmllbGQsIGl0ZW0pO1xuICAgICAgaWYgKCFmaWVsZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJFcnJvbmVvdXNUeXBlZEl0ZW0oaW5kZXgsIGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgPFNvcnRhYmxlTGlzdEl0ZW1cbiAgICAgICAgY3NzPXtbc3R5bGVzLmxpc3RDb250cm9sSXRlbSwgY29sbGFwc2VkICYmIHN0eWxlcy5saXN0Q29udHJvbEl0ZW1Db2xsYXBzZWRdfVxuICAgICAgICBpbmRleD17aW5kZXh9XG4gICAgICAgIGtleT17a2V5fVxuICAgICAgPlxuICAgICAgICB7aXNWYXJpYWJsZVR5cGVzTGlzdCAmJiAoXG4gICAgICAgICAgPExhYmVsQ29tcG9uZW50XG4gICAgICAgICAgICBmaWVsZD17ZmllbGR9XG4gICAgICAgICAgICBpc0FjdGl2ZT17ZmFsc2V9XG4gICAgICAgICAgICBoYXNFcnJvcnM9e2hhc0Vycm9yfVxuICAgICAgICAgICAgdW5pcXVlRmllbGRJZD17dGhpcy51bmlxdWVGaWVsZElkfVxuICAgICAgICAgICAgaXNGaWVsZE9wdGlvbmFsPXtmaWVsZC5nZXQoJ3JlcXVpcmVkJykgPT09IGZhbHNlfVxuICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgICA8U3R5bGVkTGlzdEl0ZW1Ub3BCYXJcbiAgICAgICAgICBjb2xsYXBzZWQ9e2NvbGxhcHNlZH1cbiAgICAgICAgICBvbkNvbGxhcHNlVG9nZ2xlPXtwYXJ0aWFsKHRoaXMuaGFuZGxlSXRlbUNvbGxhcHNlVG9nZ2xlLCBpbmRleCl9XG4gICAgICAgICAgb25SZW1vdmU9e3BhcnRpYWwodGhpcy5oYW5kbGVSZW1vdmUsIGluZGV4KX1cbiAgICAgICAgICBkcmFnSGFuZGxlSE9DPXtTb3J0YWJsZUhhbmRsZX1cbiAgICAgICAgICBkYXRhLXRlc3RpZD17YHN0eWxlZC1saXN0LWl0ZW0tdG9wLWJhci0ke2tleX1gfVxuICAgICAgICAvPlxuICAgICAgICA8TmVzdGVkT2JqZWN0TGFiZWwgY29sbGFwc2VkPXtjb2xsYXBzZWR9IGVycm9yPXtoYXNFcnJvcn0+XG4gICAgICAgICAge3RoaXMub2JqZWN0TGFiZWwoaXRlbSl9XG4gICAgICAgIDwvTmVzdGVkT2JqZWN0TGFiZWw+XG4gICAgICAgIDxDbGFzc05hbWVzPlxuICAgICAgICAgIHsoeyBjc3MsIGN4IH0pID0+IChcbiAgICAgICAgICAgIDxPYmplY3RDb250cm9sXG4gICAgICAgICAgICAgIGNsYXNzTmFtZVdyYXBwZXI9e2N4KGNsYXNzTmFtZVdyYXBwZXIsIHtcbiAgICAgICAgICAgICAgICBbY3NzYFxuICAgICAgICAgICAgICAgICAgJHtzdHlsZVN0cmluZ3MuY29sbGFwc2VkT2JqZWN0Q29udHJvbH07XG4gICAgICAgICAgICAgICAgYF06IGNvbGxhcHNlZCxcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgIHZhbHVlPXtpdGVtfVxuICAgICAgICAgICAgICBmaWVsZD17ZmllbGR9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlT2JqZWN0PXt0aGlzLmhhbmRsZUNoYW5nZUZvcihpbmRleCl9XG4gICAgICAgICAgICAgIGVkaXRvckNvbnRyb2w9e2VkaXRvckNvbnRyb2x9XG4gICAgICAgICAgICAgIHJlc29sdmVXaWRnZXQ9e3Jlc29sdmVXaWRnZXR9XG4gICAgICAgICAgICAgIG1ldGFkYXRhPXttZXRhZGF0YX1cbiAgICAgICAgICAgICAgZm9yTGlzdFxuICAgICAgICAgICAgICBvblZhbGlkYXRlT2JqZWN0PXtvblZhbGlkYXRlT2JqZWN0fVxuICAgICAgICAgICAgICBjbGVhckZpZWxkRXJyb3JzPXtjbGVhckZpZWxkRXJyb3JzfVxuICAgICAgICAgICAgICBmaWVsZHNFcnJvcnM9e2ZpZWxkc0Vycm9yc31cbiAgICAgICAgICAgICAgcmVmPXt0aGlzLnByb2Nlc3NDb250cm9sUmVmfVxuICAgICAgICAgICAgICBjb250cm9sUmVmPXtjb250cm9sUmVmfVxuICAgICAgICAgICAgICB2YWxpZGF0aW9uS2V5PXtrZXl9XG4gICAgICAgICAgICAgIGNvbGxhcHNlZD17Y29sbGFwc2VkfVxuICAgICAgICAgICAgICBkYXRhLXRlc3RpZD17YG9iamVjdC1jb250cm9sLSR7a2V5fWB9XG4gICAgICAgICAgICAgIGhhc0Vycm9yPXtoYXNFcnJvcn1cbiAgICAgICAgICAgICAgcGFyZW50SWRzPXtbLi4ucGFyZW50SWRzLCBmb3JJRCwga2V5XX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9DbGFzc05hbWVzPlxuICAgICAgPC9Tb3J0YWJsZUxpc3RJdGVtPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRXJyb25lb3VzVHlwZWRJdGVtKGluZGV4LCBpdGVtKSB7XG4gICAgY29uc3QgZmllbGQgPSB0aGlzLnByb3BzLmZpZWxkO1xuICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGdldEVycm9yTWVzc2FnZUZvclR5cGVkRmllbGRBbmRWYWx1ZShmaWVsZCwgaXRlbSk7XG4gICAgY29uc3Qga2V5ID0gYGl0ZW0tJHtpbmRleH1gO1xuICAgIHJldHVybiAoXG4gICAgICA8U29ydGFibGVMaXN0SXRlbVxuICAgICAgICBjc3M9e1tzdHlsZXMubGlzdENvbnRyb2xJdGVtLCBzdHlsZXMubGlzdENvbnRyb2xJdGVtQ29sbGFwc2VkXX1cbiAgICAgICAgaW5kZXg9e2luZGV4fVxuICAgICAgICBrZXk9e2tleX1cbiAgICAgID5cbiAgICAgICAgPFN0eWxlZExpc3RJdGVtVG9wQmFyXG4gICAgICAgICAgb25Db2xsYXBzZVRvZ2dsZT17bnVsbH1cbiAgICAgICAgICBvblJlbW92ZT17cGFydGlhbCh0aGlzLmhhbmRsZVJlbW92ZSwgaW5kZXgsIGtleSl9XG4gICAgICAgICAgZHJhZ0hhbmRsZUhPQz17U29ydGFibGVIYW5kbGV9XG4gICAgICAgIC8+XG4gICAgICAgIDxOZXN0ZWRPYmplY3RMYWJlbCBjb2xsYXBzZWQ9e3RydWV9IGVycm9yPXt0cnVlfT5cbiAgICAgICAgICB7ZXJyb3JNZXNzYWdlfVxuICAgICAgICA8L05lc3RlZE9iamVjdExhYmVsPlxuICAgICAgPC9Tb3J0YWJsZUxpc3RJdGVtPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJMaXN0Q29udHJvbCgpIHtcbiAgICBjb25zdCB7IHZhbHVlLCBmb3JJRCwgZmllbGQsIGNsYXNzTmFtZVdyYXBwZXIgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpdGVtc0NvbGxhcHNlZCwgbGlzdENvbGxhcHNlZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCBpdGVtcyA9IHZhbHVlIHx8IExpc3QoKTtcbiAgICBjb25zdCBsYWJlbCA9IGZpZWxkLmdldCgnbGFiZWwnLCBmaWVsZC5nZXQoJ25hbWUnKSk7XG4gICAgY29uc3QgbGFiZWxTaW5ndWxhciA9IGZpZWxkLmdldCgnbGFiZWxfc2luZ3VsYXInKSB8fCBmaWVsZC5nZXQoJ2xhYmVsJywgZmllbGQuZ2V0KCduYW1lJykpO1xuICAgIGNvbnN0IGxpc3RMYWJlbCA9IGl0ZW1zLnNpemUgPT09IDEgPyBsYWJlbFNpbmd1bGFyLnRvTG93ZXJDYXNlKCkgOiBsYWJlbC50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IG1pbmltaXplQ29sbGFwc2VkSXRlbXMgPSBmaWVsZC5nZXQoJ21pbmltaXplX2NvbGxhcHNlZCcsIGZhbHNlKTtcbiAgICBjb25zdCBhbGxJdGVtc0NvbGxhcHNlZCA9IGl0ZW1zQ29sbGFwc2VkLmV2ZXJ5KHZhbCA9PiB2YWwgPT09IHRydWUpO1xuICAgIGNvbnN0IHNlbGZDb2xsYXBzZWQgPSBhbGxJdGVtc0NvbGxhcHNlZCAmJiAobGlzdENvbGxhcHNlZCB8fCAhbWluaW1pemVDb2xsYXBzZWRJdGVtcyk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPENsYXNzTmFtZXM+XG4gICAgICAgIHsoeyBjeCwgY3NzIH0pID0+IChcbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBpZD17Zm9ySUR9XG4gICAgICAgICAgICBjbGFzc05hbWU9e2N4KFxuICAgICAgICAgICAgICBjbGFzc05hbWVXcmFwcGVyLFxuICAgICAgICAgICAgICBjc3NgXG4gICAgICAgICAgICAgICAgJHtzdHlsZVN0cmluZ3Mub2JqZWN0V2lkZ2V0VG9wQmFyQ29udGFpbmVyfVxuICAgICAgICAgICAgICBgLFxuICAgICAgICAgICAgKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8T2JqZWN0V2lkZ2V0VG9wQmFyXG4gICAgICAgICAgICAgIGFsbG93QWRkPXtmaWVsZC5nZXQoJ2FsbG93X2FkZCcsIHRydWUpfVxuICAgICAgICAgICAgICBvbkFkZD17dGhpcy5oYW5kbGVBZGR9XG4gICAgICAgICAgICAgIHR5cGVzPXtmaWVsZC5nZXQoVFlQRVNfS0VZLCBudWxsKX1cbiAgICAgICAgICAgICAgb25BZGRUeXBlPXt0eXBlID0+IHRoaXMuaGFuZGxlQWRkVHlwZSh0eXBlLCByZXNvbHZlRmllbGRLZXlUeXBlKGZpZWxkKSl9XG4gICAgICAgICAgICAgIGhlYWRpbmc9e2Ake2l0ZW1zLnNpemV9ICR7bGlzdExhYmVsfWB9XG4gICAgICAgICAgICAgIGxhYmVsPXtsYWJlbFNpbmd1bGFyLnRvTG93ZXJDYXNlKCl9XG4gICAgICAgICAgICAgIG9uQ29sbGFwc2VUb2dnbGU9e3RoaXMuaGFuZGxlQ29sbGFwc2VBbGxUb2dnbGV9XG4gICAgICAgICAgICAgIGNvbGxhcHNlZD17c2VsZkNvbGxhcHNlZH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7KCFzZWxmQ29sbGFwc2VkIHx8ICFtaW5pbWl6ZUNvbGxhcHNlZEl0ZW1zKSAmJiAoXG4gICAgICAgICAgICAgIDxTb3J0YWJsZUxpc3RcbiAgICAgICAgICAgICAgICBpdGVtcz17aXRlbXN9XG4gICAgICAgICAgICAgICAgcmVuZGVySXRlbT17dGhpcy5yZW5kZXJJdGVtfVxuICAgICAgICAgICAgICAgIG9uU29ydEVuZD17dGhpcy5vblNvcnRFbmR9XG4gICAgICAgICAgICAgICAgdXNlRHJhZ0hhbmRsZVxuICAgICAgICAgICAgICAgIGxvY2tBeGlzPVwieVwiXG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICApfVxuICAgICAgPC9DbGFzc05hbWVzPlxuICAgICk7XG4gIH1cblxuICByZW5kZXJJbnB1dCgpIHtcbiAgICBjb25zdCB7IGZvcklELCBjbGFzc05hbWVXcmFwcGVyIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgdmFsdWUgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGlucHV0XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgaWQ9e2ZvcklEfVxuICAgICAgICB2YWx1ZT17dmFsdWV9XG4gICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgb25Gb2N1cz17dGhpcy5oYW5kbGVGb2N1c31cbiAgICAgICAgb25CbHVyPXt0aGlzLmhhbmRsZUJsdXJ9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lV3JhcHBlcn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5nZXRWYWx1ZVR5cGUoKSAhPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyTGlzdENvbnRyb2woKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVySW5wdXQoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ== */")),
      index: index,
      key: key
    }, (0, _core.jsx)(StyledListItemTopBar, {
      onCollapseToggle: null,
      onRemove: (0, _partial2.default)(this.handleRemove, index, key),
      dragHandleHOC: _reactSortableHoc.SortableHandle
    }), (0, _core.jsx)(NestedObjectLabel, {
      collapsed: true,
      error: true
    }, errorMessage));
  }

  renderListControl() {
    const {
      value,
      forID,
      field,
      classNameWrapper
    } = this.props;
    const {
      itemsCollapsed,
      listCollapsed
    } = this.state;
    const items = value || (0, _immutable.List)();
    const label = field.get('label', field.get('name'));
    const labelSingular = field.get('label_singular') || field.get('label', field.get('name'));
    const listLabel = items.size === 1 ? labelSingular.toLowerCase() : label.toLowerCase();
    const minimizeCollapsedItems = field.get('minimize_collapsed', false);
    const allItemsCollapsed = itemsCollapsed.every(val => val === true);
    const selfCollapsed = allItemsCollapsed && (listCollapsed || !minimizeCollapsedItems);
    return (0, _core.jsx)(_core.ClassNames, null, ({
      cx,
      css
    }) => (0, _core.jsx)("div", {
      id: forID,
      className: cx(classNameWrapper, css`
                ${styleStrings.objectWidgetTopBarContainer}
              `)
    }, (0, _core.jsx)(_netlifyCmsUiDefault.ObjectWidgetTopBar, {
      allowAdd: field.get('allow_add', true),
      onAdd: this.handleAdd,
      types: field.get(_typedListHelpers.TYPES_KEY, null),
      onAddType: type => this.handleAddType(type, (0, _typedListHelpers.resolveFieldKeyType)(field)),
      heading: `${items.size} ${listLabel}`,
      label: labelSingular.toLowerCase(),
      onCollapseToggle: this.handleCollapseAllToggle,
      collapsed: selfCollapsed
    }), (!selfCollapsed || !minimizeCollapsedItems) && (0, _core.jsx)(SortableList, {
      items: items,
      renderItem: this.renderItem,
      onSortEnd: this.onSortEnd,
      useDragHandle: true,
      lockAxis: "y"
    })));
  }

  renderInput() {
    const {
      forID,
      classNameWrapper
    } = this.props;
    const {
      value
    } = this.state;
    return (0, _core.jsx)("input", {
      type: "text",
      id: forID,
      value: value,
      onChange: this.handleChange,
      onFocus: this.handleFocus,
      onBlur: this.handleBlur,
      className: classNameWrapper
    });
  }

  render() {
    if (this.getValueType() !== null) {
      return this.renderListControl();
    } else {
      return this.renderInput();
    }
  }

}

exports.default = ListControl;

_defineProperty(ListControl, "propTypes", {
  metadata: _reactImmutableProptypes.default.map,
  onChange: _propTypes.default.func.isRequired,
  onChangeObject: _propTypes.default.func.isRequired,
  onValidateObject: _propTypes.default.func.isRequired,
  validate: _propTypes.default.func.isRequired,
  value: _reactImmutableProptypes.default.list,
  field: _propTypes.default.object,
  forID: _propTypes.default.string,
  controlRef: _propTypes.default.func,
  mediaPaths: _reactImmutableProptypes.default.map.isRequired,
  getAsset: _propTypes.default.func.isRequired,
  onOpenMediaLibrary: _propTypes.default.func.isRequired,
  onAddAsset: _propTypes.default.func.isRequired,
  onRemoveInsertedMedia: _propTypes.default.func.isRequired,
  classNameWrapper: _propTypes.default.string.isRequired,
  setActiveStyle: _propTypes.default.func.isRequired,
  setInactiveStyle: _propTypes.default.func.isRequired,
  editorControl: _propTypes.default.elementType.isRequired,
  resolveWidget: _propTypes.default.func.isRequired,
  clearFieldErrors: _propTypes.default.func.isRequired,
  fieldsErrors: _reactImmutableProptypes.default.map.isRequired,
  entry: _reactImmutableProptypes.default.map.isRequired
});

_defineProperty(ListControl, "defaultProps", {
  value: (0, _immutable.List)(),
  parentIds: []
});